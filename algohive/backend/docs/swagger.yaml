basePath: /api/v1
definitions:
  models.APIEnvironment:
    properties:
      address:
        type: string
      id:
        type: string
      name:
        type: string
      scopes:
        items:
          $ref: '#/definitions/models.Scope'
        type: array
    type: object
  models.Competition:
    properties:
      apienvironmentID:
        type: string
      apitheme:
        type: string
      description:
        type: string
      finished:
        type: boolean
      groups:
        items:
          $ref: '#/definitions/models.Group'
        type: array
      id:
        type: string
      show:
        type: boolean
      title:
        type: string
    type: object
  models.Group:
    properties:
      competitions:
        items:
          $ref: '#/definitions/models.Competition'
        type: array
      description:
        type: string
      id:
        type: string
      name:
        type: string
      scopeID:
        type: string
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.Role:
    properties:
      id:
        type: string
      name:
        type: string
      permissions:
        type: integer
      scopes:
        items:
          $ref: '#/definitions/models.Scope'
        type: array
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.Scope:
    properties:
      apienvironments:
        items:
          $ref: '#/definitions/models.APIEnvironment'
        type: array
      description:
        type: string
      groups:
        items:
          $ref: '#/definitions/models.Group'
        type: array
      id:
        type: string
      name:
        type: string
      roles:
        items:
          $ref: '#/definitions/models.Role'
        type: array
    type: object
  models.User:
    properties:
      blocked:
        type: boolean
      email:
        type: string
      firstname:
        type: string
      groups:
        items:
          $ref: '#/definitions/models.Group'
        type: array
      id:
        type: string
      lastConnected:
        type: string
      lastname:
        type: string
      password:
        type: string
      roles:
        items:
          $ref: '#/definitions/models.Role'
        type: array
    type: object
  v1.AuthResponse:
    properties:
      email:
        type: string
      token:
        type: string
      user_id:
        type: string
    type: object
  v1.CreateGroupRequest:
    properties:
      description:
        type: string
      name:
        type: string
      scope_ids:
        items:
          type: string
        type: array
    required:
    - name
    - scope_ids
    type: object
  v1.CreateScopeRequest:
    properties:
      api_ids:
        items:
          type: string
        type: array
      name:
        type: string
    required:
    - api_ids
    - name
    type: object
  v1.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  v1.RegisterRequest:
    properties:
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - firstname
    - lastname
    - password
    type: object
  v1.UpdateGroupRequest:
    properties:
      description:
        type: string
      name:
        type: string
    type: object
  v1.UserWithRoles:
    properties:
      roles:
        items:
          type: string
        type: array
      user:
        $ref: '#/definitions/models.User'
    type: object
info:
  contact:
    email: ericphlpp@proton.me
    name: AlgoHive Support
  description: This is the API documentation for the AlgoHive API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Swagger AlgoHive API
  version: 1.0.0
paths:
  /apis:
    get:
      consumes:
      - application/json
      description: Get all APIs, only accessible to users with the API_ENV permission
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.APIEnvironment'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Get all APIs Catalog
      tags:
      - APIs
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token
      parameters:
      - description: Login Credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/v1.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.AuthResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User Login
      tags:
      - Auth
  /auth/logout:
    post:
      description: Logout a user by invalidating their token
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: User Logout
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: Registration Details
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/v1.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/v1.AuthResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User Register
      tags:
      - Auth
  /groups:
    get:
      consumes:
      - application/json
      description: Get all groups, only accessible to users with the GROUPS permission
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Group'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Get all groups
      tags:
      - Groups
    post:
      consumes:
      - application/json
      description: Create a group, only accessible to users with the GROUPS permission
      parameters:
      - description: Group to create
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/v1.CreateGroupRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Group'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Create a group
      tags:
      - Groups
  /groups/{group_id}:
    delete:
      consumes:
      - application/json
      description: Delete a group and cascade delete all users and competitions associated
        with the group
      parameters:
      - description: Group ID
        in: path
        name: group_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Delete a group and cascade delete all users and competitions associated
        with the group
      tags:
      - Groups
    get:
      consumes:
      - application/json
      description: Get a group
      parameters:
      - description: Group ID
        in: path
        name: group_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Group'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Get a group
      tags:
      - Groups
    put:
      consumes:
      - application/json
      description: Update a group name and description
      parameters:
      - description: Group ID
        in: path
        name: group_id
        required: true
        type: string
      - description: Group to update
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/v1.UpdateGroupRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Update a group name and description
      tags:
      - Groups
  /groups/{group_id}/users/{user_id}:
    delete:
      consumes:
      - application/json
      description: Remove a user from a group
      parameters:
      - description: Group ID
        in: path
        name: group_id
        required: true
        type: string
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Remove a user from a group
      tags:
      - Groups
    post:
      consumes:
      - application/json
      description: Add a user to a group
      parameters:
      - description: Group ID
        in: path
        name: group_id
        required: true
        type: string
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Add a user to a group
      tags:
      - Groups
  /ping:
    get:
      description: Répond avec "pong"
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Répond avec "pong"
      tags:
      - App
  /roles:
    get:
      consumes:
      - application/json
      description: Get all Roles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Role'
            type: array
      security:
      - Bearer: []
      summary: Get all Roles
      tags:
      - Roles
    post:
      consumes:
      - application/json
      description: Create a new Role
      parameters:
      - description: Role Profile
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/models.Role'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Role'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Create a new Role
      tags:
      - Roles
  /roles/{role_id}:
    get:
      consumes:
      - application/json
      description: Get a Role by ID
      parameters:
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Role'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Get a Role by ID
      tags:
      - Roles
    put:
      consumes:
      - application/json
      description: Update a Role by ID
      parameters:
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: string
      - description: Role Profile
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/models.Role'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Role'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Update a Role by ID
      tags:
      - Roles
  /scopes:
    get:
      consumes:
      - application/json
      description: Get all scopes, only accessible to users with the SCOPES permission
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Scope'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Get all scopes
      tags:
      - Scopes
    post:
      consumes:
      - application/json
      description: Create a scope, only accessible to users with the SCOPES permission
      parameters:
      - description: Scope Details
        in: body
        name: createScope
        required: true
        schema:
          $ref: '#/definitions/v1.CreateScopeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Scope'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Create a scope
      tags:
      - Scopes
  /scopes/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a scope, only accessible to users with the SCOPES permission
      parameters:
      - description: Scope ID
        in: path
        name: scope_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Delete a scope
      tags:
      - Scopes
    get:
      consumes:
      - application/json
      description: Get a scope, only accessible to users with the SCOPES permission
      parameters:
      - description: Scope ID
        in: path
        name: scope_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Scope'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Get a scope
      tags:
      - Scopes
    put:
      consumes:
      - application/json
      description: Update a scope, only accessible to users with the SCOPES permission
      parameters:
      - description: Scope ID
        in: path
        name: scope_id
        required: true
        type: string
      - description: Scope Details
        in: body
        name: updateScope
        required: true
        schema:
          $ref: '#/definitions/v1.CreateScopeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Scope'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Update a scope
      tags:
      - Scopes
  /scopes/{scope_id}/roles/{role_id}:
    delete:
      consumes:
      - application/json
      description: Detach the scope from a role, only accessible to users with the
        SCOPES permission
      parameters:
      - description: Scope ID
        in: path
        name: scope_id
        required: true
        type: string
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Scope'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Detach the scope from a role
      tags:
      - Scopes
    post:
      consumes:
      - application/json
      description: Attach the scope to a role, only accessible to users with the SCOPES
        permission
      parameters:
      - description: Scope ID
        in: path
        name: scope_id
        required: true
        type: string
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Scope'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Attach the scope to a role
      tags:
      - Scopes
  /user/{user_id}/role/{role_id}:
    delete:
      consumes:
      - application/json
      description: Detach a Role from a User
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Detach a Role from a User
      tags:
      - Roles
    post:
      consumes:
      - application/json
      description: Attach a Role to a User
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Attach a Role to a User
      tags:
      - Roles
  /user/group/{group_id}:
    post:
      consumes:
      - application/json
      description: Create a new user and attach a group to it
      parameters:
      - description: User Profile
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      - description: Group ID
        in: path
        name: group_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Create User and attach a Group
      tags:
      - Users
  /user/group/{group_id}/bulk:
    post:
      consumes:
      - application/json
      description: Create multiple new users and attach a group to them
      parameters:
      - description: Users Profiles
        in: body
        name: users
        required: true
        schema:
          items:
            $ref: '#/definitions/models.User'
          type: array
      - description: Group ID
        in: path
        name: group_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Create Bulk Users and attach a Group
      tags:
      - Users
  /user/profile:
    get:
      description: Get the profile information of the authenticated user
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Get User Profile
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update the profile information of the authenticated user
      parameters:
      - description: User Profile
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Update User Profile
      tags:
      - Users
  /user/roles:
    post:
      consumes:
      - application/json
      description: Create a new user and attach roles to it
      parameters:
      - description: User and Roles
        in: body
        name: userWithRoles
        required: true
        schema:
          $ref: '#/definitions/v1.UserWithRoles'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Create a new user and attach roles
      tags:
      - Users
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
